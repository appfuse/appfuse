<?xml version="1.0" encoding="UTF-8"?>
<project name="plugin-test" default="test-all" xmlns:artifact="urn:maven-artifact-ant">

    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
        <classpath>
            <pathelement location="lib/maven-ant-tasks-2.0.10.jar" />
        </classpath>
    </typedef>
    
    <artifact:dependencies pathId="classpath">
        <dependency groupId="ant-contrib" artifactId="ant-contrib" version="1.0b2"/>
    </artifact:dependencies>
    
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="classpath"/>

    <property name="version" value="2.1.1-SNAPSHOT"/>
    <property name="archetype" value="${archetype}"/>
    <property name="test.dir" value="${basedir}/target"/>

    <!-- Basic Archetypes -->
    <target name="test-jsf-basic" description="tests plugin with jsf basic archetype">
        <create-gen-basic archetype="appfuse-basic-jsf" name="basic-jsf"/>
    </target>

    <target name="test-spring-basic" description="tests plugin with spring basic archetype">
        <create-gen-basic archetype="appfuse-basic-spring" name="basic-spring"/>
    </target>

    <target name="test-struts-basic" description="tests plugin with struts basic archetype">
        <create-gen-basic archetype="appfuse-basic-struts" name="basic-struts"/>
    </target>

    <target name="test-tapestry-basic" description="tests plugin with tapestry basic archetype">
        <create-gen-basic archetype="appfuse-basic-tapestry" name="basic-tapestry"/>
    </target>

    <target name="test-basic" description="Runs all basic archetype tests using Ant">
        <antcall target="test-jsf-basic"/>
        <antcall target="test-spring-basic"/>
        <antcall target="test-struts-basic"/>
        <antcall target="test-tapestry-basic"/>
    </target>

    <!-- Modular Archetypes -->
    <target name="test-jsf-modular" description="tests plugin with jsf modular archetype">
        <create-gen-modular archetype="appfuse-modular-jsf" name="modular-jsf"/>
    </target>

    <target name="test-spring-modular" description="tests plugin with spring modular archetype">
        <create-gen-modular archetype="appfuse-modular-spring" name="modular-spring"/>
    </target>

    <target name="test-struts-modular" description="tests plugin with struts modular archetype">
        <create-gen-modular archetype="appfuse-modular-struts" name="modular-struts"/>
    </target>

    <target name="test-tapestry-modular" description="tests plugin with tapestry modular archetype">
        <create-gen-modular archetype="appfuse-modular-tapestry" name="modular-tapestry"/>
    </target>

    <!-- Light Archetypes -->
    <target name="test-jsf-light" description="tests plugin with jsf light archetype">
        <create-gen-basic archetype="appfuse-light-jsf" name="light-jsf"/>
    </target>

    <target name="test-spring-light" description="tests plugin with spring light archetype">
        <create-gen-basic archetype="appfuse-light-spring" name="light-spring"/>
    </target>

    <target name="test-struts-light" description="tests plugin with struts light archetype">
        <create-gen-basic archetype="appfuse-light-struts" name="light-struts"/>
    </target>

    <target name="test-tapestry-light" description="tests plugin with tapestry light archetype">
        <create-gen-basic archetype="appfuse-light-tapestry" name="light-tapestry"/>
    </target>
    
    <target name="test-wicket-light" description="tests plugin with wicket light archetype">
        <create-gen-basic archetype="appfuse-light-wicket" name="light-wicket"/>
    </target>

    <target name="test-light" description="Runs all light archetype tests using Ant">
        <antcall target="test-jsf-light"/>
        <antcall target="test-spring-light"/>
        <antcall target="test-struts-light"/>
        <antcall target="test-tapestry-light"/>
    </target>

    <target name="test-modular" description="Runs all modular archetype tests using Ant">
        <antcall target="test-jsf-modular"/>
        <antcall target="test-spring-modular"/>
        <antcall target="test-struts-modular"/>
        <antcall target="test-tapestry-modular"/>
    </target>

    <target name="test-all" description="Tests AMP, Full Source, iBATIS and JPA with AppFuse archetypes">
        <antcall target="test-basic"/>
        <antcall target="test-modular"/>
        <antcall target="test-basic-source"/>
        <antcall target="test-modular-source"/>
        <antcall target="test-ibatis"/>
        <antcall target="test-jpa"/>
    </target>
    
    <target name="test-all-light" description="Tests AMP and Full Source with AppFuse Light">
        <antcall target="test-light"/>
        <antcall target="test-light-source"/>
    </target>

    <macrodef name="create-gen-basic">
        <attribute name="archetype"/>
        <attribute name="version" default="${version}"/>
        <attribute name="name"/>

        <sequential>
            <delete dir="${test.dir}/@{name}"/>
            <mkdir dir="${test.dir}"/>
            <maven dir="${test.dir}" archetype="@{archetype}-archetype" version="@{version}" name="@{name}"/>

            <!-- copy Person.java to src -->
            <copy todir="${test.dir}/@{name}/src/main/java/com">
                <fileset dir="src/test/java/com" includes="**/*.java"/>
            </copy>

            <!-- add Person to hibernate.cfg.xml -->
            <replace file="${test.dir}/@{name}/src/main/resources/hibernate.cfg.xml">
                <replacetoken><![CDATA[<mapping class="org.appfuse.model.Role"/>]]></replacetoken>
                <replacevalue><![CDATA[<mapping class="org.appfuse.model.Role"/>
        <mapping class="com.company.model.Person"/>]]></replacevalue>
            </replace>

            <echo level="info">Generating Generic CRUD for Person entity...</echo>
            <!-- run gen install integration-test -->
            <if>
                <contains string="@{name}" substring="light"/>
                <then>
                    <property name="test-command" value="verify -Duser.language=en -Djdbc.username=sa -Djdbc.password="/>
                </then>
                <else>
                    <property name="test-command" value="verify -Duser.language=en"/>
                </else>
            </if>
 
            <echo message="Using test command: ${test-command}"/>
            
            <maven dir="${test.dir}/@{name}" command="appfuse:gen -Dentity=Person"/>
            <maven dir="${test.dir}/@{name}" command="${test-command}"/>

            <echo level="info">Removing Person entity...</echo>
            <maven dir="${test.dir}/@{name}" command="appfuse:remove -Dentity=Person -Dskip.areyousure=true"/>
            <maven dir="${test.dir}/@{name}" command="clean ${test-command}"/>

            <!-- copy Person.java to src -->
            <copy todir="${test.dir}/@{name}/src/main/java/com">
                <fileset dir="src/test/java/com" includes="**/*.java"/>
            </copy>

            <!-- This time, we'll test the auto-adding of <mapping class="com.company.model.Person"/> to -->
            <!-- hibernate.cfg.xml by doing nothing to add it ourselves. -->

            <echo level="info">Generating CRUD for Person entity...</echo>

            <!-- test w/o generic core -->
            <maven dir="${test.dir}/@{name}" command="appfuse:gen -Dentity=Person -Damp.genericCore=false"/>
            <maven dir="${test.dir}/@{name}" command="${test-command}"/>
        </sequential>
    </macrodef>

    <macrodef name="create-gen-modular">
        <attribute name="archetype"/>
        <attribute name="version" default="${version}"/>
        <attribute name="name"/>

        <sequential>
            <delete dir="${test.dir}/@{name}"/>
            <mkdir dir="${test.dir}"/>
            <maven dir="${test.dir}" archetype="@{archetype}-archetype" version="@{version}" name="@{name}"/>

            <!-- copy Person.java to core/src -->
            <copy todir="${test.dir}/@{name}/core/src/main/java/com">
                <fileset dir="src/test/java/com" includes="**/*.java"/>
            </copy>

            <!-- add Person to hibernate.cfg.xml -->
            <replace file="${test.dir}/@{name}/core/src/main/resources/hibernate.cfg.xml">
                <replacetoken><![CDATA[<mapping class="org.appfuse.model.Role"/>]]></replacetoken>
                <replacevalue><![CDATA[<mapping class="org.appfuse.model.Role"/>
        <mapping class="com.company.model.Person"/>]]></replacevalue>
            </replace>

            <maven dir="${test.dir}/@{name}" command="install -N"/>

            <!-- gen and test core -->
            <maven dir="${test.dir}/@{name}/core" command="appfuse:gen -Dentity=Person -Damp.genericCore=false"/>
            <maven dir="${test.dir}/@{name}/core" command="install -Dsurefire.useFile=false"/>

            <!-- get and test web -->
            <maven dir="${test.dir}/@{name}/web" command="appfuse:gen -Dentity=Person -Damp.genericCore=false"/>
            <maven dir="${test.dir}/@{name}/web" command="install -Dsurefire.useFile=false"/>
        </sequential>
    </macrodef>

    <target name="test-basic-source" description="Tests extracting source into basic archetypes">
        <antcall target="test-jsf-basic-source"/>
        <antcall target="test-spring-basic-source"/>
        <antcall target="test-struts-basic-source"/>
        <antcall target="test-tapestry-basic-source"/>
        <antcall target="test-core-source"/>
        <antcall target="test-ws-source"/>
    </target>

    <target name="test-modular-source" description="Tests extracting source into modular archetypes">
        <antcall target="test-jsf-modular-source"/>
        <antcall target="test-spring-modular-source"/>
        <antcall target="test-struts-modular-source"/>
        <antcall target="test-tapestry-modular-source"/>
    </target>

    <target name="test-light-source" description="Tests extracting source into light archetypes">
        <antcall target="test-jsf-light-source"/>
        <antcall target="test-spring-light-source"/>
        <antcall target="test-struts-light-source"/>
        <antcall target="test-stripes-light-source"/>
        <antcall target="test-tapestry-light-source"/>
        <antcall target="test-wicket-light-source"/>
    </target>
    
    <target name="test-jsf-basic-source" description="tests full-source plugin with jsf basic archetype">
        <full-source archetype="appfuse-basic-jsf" name="basic-jsf-source"/>
    </target>

     <target name="test-spring-basic-source" description="tests full-source plugin with spring basic archetype">
        <full-source archetype="appfuse-basic-spring" name="basic-spring-source"/>
    </target>

     <target name="test-struts-basic-source" description="tests full-source plugin with struts basic archetype">
        <full-source archetype="appfuse-basic-struts" name="basic-struts-source"/>
    </target>

     <target name="test-tapestry-basic-source" description="tests full-source plugin with tapestry basic archetype">
        <full-source archetype="appfuse-basic-tapestry" name="basic-tapestry-source"/>
    </target>

    <target name="test-core-source" description="tests full-source plugin with core archetype">
        <full-source archetype="appfuse-core" name="core-source"/>
        <full-source archetype="appfuse-core" name="core-ibatis-source" daoFramework="ibatis" hibernate3Config="jpaconfiguration" modular="false"/>
        <full-source archetype="appfuse-core" name="core-jpa-source" daoFramework="jpa" hibernate3Config="jpaconfiguration" modular="false"/>
    </target>

    <target name="test-ws-source" description="tests full-source plugin with ws archetype">
        <full-source archetype="appfuse-ws" name="ws-source"/>
    </target>
    
    <target name="test-jsf-modular-source" description="tests full-source plugin with jsf modular archetype">
        <full-source archetype="appfuse-modular-jsf" name="modular-jsf-source"/>
        <full-source archetype="appfuse-modular-jsf" name="modular-jsf-ibatis-source" daoFramework="ibatis" hibernate3Config="annotationconfiguration"/>
        <full-source archetype="appfuse-modular-jsf" name="modular-jsf-jpa-source" daoFramework="jpa" hibernate3Config="jpaconfiguration"/>
    </target>

     <target name="test-spring-modular-source" description="tests full-source plugin with spring modular archetype">
        <full-source archetype="appfuse-modular-spring" name="modular-spring-source"/>
        <full-source archetype="appfuse-modular-spring" name="modular-spring-ibatis-source" daoFramework="ibatis" hibernate3Config="annotationconfiguration"/>
        <full-source archetype="appfuse-modular-spring" name="modular-spring-jpa-source" daoFramework="jpa" hibernate3Config="jpaconfiguration"/>
    </target>

     <target name="test-struts-modular-source" description="tests full-source plugin with struts modular archetype">
        <full-source archetype="appfuse-modular-struts" name="modular-struts-source"/>
        <full-source archetype="appfuse-modular-struts" name="modular-struts-ibatis-source" daoFramework="ibatis" hibernate3Config="annotationconfiguration"/>
        <full-source archetype="appfuse-modular-struts" name="modular-struts-jpa-source" daoFramework="jpa" hibernate3Config="jpaconfiguration"/>
    </target>

     <target name="test-tapestry-modular-source" description="tests full-source plugin with tapestry modular archetype">
        <full-source archetype="appfuse-modular-tapestry" name="modular-tapestry-source"/>
        <full-source archetype="appfuse-modular-tapestry" name="modular-tapestry-ibatis-source" daoFramework="ibatis" hibernate3Config="annotationconfiguration"/>
        <full-source archetype="appfuse-modular-tapestry" name="modular-tapestry-source" daoFramework="jpa" hibernate3Config="jpaconfiguration"/>
    </target>
    
    <target name="test-jsf-light-source" description="tests full-source plugin with jsf light archetype">
        <full-source archetype="appfuse-light-jsf" name="light-jsf-source"/>
    </target>

     <target name="test-spring-light-source" description="tests full-source plugin with spring light archetype">
        <full-source archetype="appfuse-light-spring" name="light-spring-source"/>
    </target>

     <target name="test-struts-light-source" description="tests full-source plugin with struts light archetype">
        <full-source archetype="appfuse-light-struts" name="light-struts-source"/>
    </target>

    <target name="test-stripes-light-source" description="tests full-source plugin with stripes light archetype">
        <full-source archetype="appfuse-light-stripes" name="light-stripes-source"/>
    </target>
    
    <target name="test-tapestry-light-source" description="tests full-source plugin with tapestry light archetype">
        <full-source archetype="appfuse-light-tapestry" name="light-tapestry-source"/>
    </target>
    
    <target name="test-wicket-light-source" description="tests full-source plugin with wicket light archetype">
        <full-source archetype="appfuse-light-wicket" name="light-wicket-source"/>
    </target>
    
    <macrodef name="full-source">
        <attribute name="archetype"/>
        <attribute name="version" default="${version}"/>
        <attribute name="name"/>
        <attribute name="modular" default="true"/>
        <attribute name="daoFramework" default="hibernate"/>
        <attribute name="hibernate3Config" default="annotationconfiguration"/>

        <sequential>
            <delete dir="${test.dir}/@{name}"/>
            <mkdir dir="${test.dir}"/>
            <maven dir="${test.dir}" archetype="@{archetype}-archetype" version="@{version}" name="@{name}"/>

            <if>
                <not><equals arg1="@{daoFramework}" arg2="hibernate"/></not>
                <then>
                    <changeDaoFramework name="@{name}" daoFramework="@{daoFramework}" hibernate3Config="@{hibernate3Config}"/>
                    <if>
                        <equals arg1="@{modular}" arg2="true"/>
                        <then>
                            <!-- The changeDaoFramework macro only changes for root pom.xml -->
                            <replace file="${test.dir}/@{name}/core/pom.xml"
                                     token="annotationconfiguration" value="@{hibernate3Config}"/>
                        </then>
                    </if>
                </then>
            </if>
            
            <!-- Don't use db profile (in Bamboo) for AppFuse Light -->
            <if>
                <contains string="@{name}" substring="light"/>
                <then>
                    <property name="test-command" value="integration-test -Duser.language=en -Dsurefire.useFile=false -Djdbc.username=sa -Djdbc.password="/>
                </then>
                <else>
                    <property name="test-command" value="verify -Duser.language=en -Dsurefire.useFile=false"/>
                </else>
            </if>
            
            <!-- run full-source verify -->
            <maven dir="${test.dir}/@{name}" command="appfuse:full-source"/>
            <maven dir="${test.dir}/@{name}" command="${test-command}"/>
        </sequential>
    </macrodef>

    <macrodef name="maven">
        <attribute name="dir"/>
        <attribute name="name" default=""/>
        <attribute name="archetype" default=""/>
        <attribute name="version" default=""/>
        <attribute name="command" default="archetype:generate -B -DarchetypeGroupId=org.appfuse.archetypes -DarchetypeArtifactId=@{archetype}
                                           -DarchetypeVersion=@{version} -DgroupId=com.company -DartifactId=@{name} -DarchetypeCatalog=local"/>

        <sequential>
            <exec dir="@{dir}" executable="mvn.bat" os="Windows 7" failonerror="true" errorproperty="command.failed">
                <arg line="@{command}"/>
            </exec>
            <exec dir="@{dir}" executable="mvn" os="Mac OS X" failonerror="true" errorproperty="command.failed">
                <arg line="@{command} -e"/>
            </exec>
            <exec dir="@{dir}" executable="mvn" os="Linux" failonerror="true" errorproperty="command.failed">
                <arg line="@{command}"/>
            </exec>

            <!--fail if="command.failed">Failed to run '@{command}' command</fail-->
        </sequential>
    </macrodef>
    
    <!-- Test iBATIS -->
    <target name="test-ibatis" description="creates projects, changes dao.framework to ibatis and tests generation">
        <create-project-for-daoframework archetype="appfuse-basic-jsf" name="basic-jsf-ibatis" 
            daoFramework="ibatis" hibernate3Config="annotationconfiguration"/>
        <create-project-for-daoframework archetype="appfuse-basic-struts" name="basic-struts-ibatis" 
            daoFramework="ibatis" hibernate3Config="annotationconfiguration"/>
    </target>
    
    <!-- Test JPA -->
    <target name="test-jpa" description="creates projects, changes dao.framework to jpa and tests generation">
        <create-project-for-daoframework archetype="appfuse-basic-spring" name="basic-spring-jpa" daoFramework="jpa"/>
        <create-project-for-daoframework archetype="appfuse-basic-tapestry" name="basic-tapestry-jpa" daoFramework="jpa"/>
    </target>

    <!-- Test generating POJOs from tables -->
    
    <macrodef name="create-project-for-daoframework">
        <attribute name="archetype"/>
        <attribute name="version" default="${version}"/>
        <attribute name="fullSource" default="false"/>
        <attribute name="name"/>
        <attribute name="daoFramework"/>
        <attribute name="hibernate3Config" default="jpaconfiguration"/>

        <sequential>
            <delete dir="${test.dir}/@{name}"/>
            <mkdir dir="${test.dir}"/>
            <maven dir="${test.dir}" archetype="@{archetype}-archetype" version="@{version}" name="@{name}"/>

            <!-- copy Person.java to src -->
            <copy todir="${test.dir}/@{name}/src/main/java/com">
                <fileset dir="src/test/java/com" includes="**/*.java"/>
            </copy>
            
            <if>
                <equals arg1="@{fullSource}" arg2="true"/>
                <then>
                    <!-- full-source it and verify everything works -->
                    <maven dir="${test.dir}/@{name}" command="appfuse:full-source"/>
                    <maven dir="${test.dir}/@{name}" command="test -Dsurefire.useFile=false"/>
                </then>
            </if>
            
            <changeDaoFramework name="@{name}" daoFramework="@{daoFramework}" hibernate3Config="@{hibernate3Config}"/>

            <!-- test with generic core -->
            <maven dir="${test.dir}/@{name}" command="appfuse:gen -Dentity=Person -e"/>
            <maven dir="${test.dir}/@{name}" command="verify -Duser.language=en -Dsurefire.useFile=false"/>
            <maven dir="${test.dir}/@{name}" command="appfuse:remove -Dentity=Person -Dskip.areyousure=true"/>
            
            <!-- test w/o generic core -->
            <maven dir="${test.dir}/@{name}" command="appfuse:gen -Dentity=Person -Damp.genericCore=false"/>
            <maven dir="${test.dir}/@{name}" command="verify -Duser.language=en -Dsurefire.useFile=false"/>
        </sequential>
    </macrodef>
    
    <macrodef name="changeDaoFramework">
        <attribute name="name"/>
        <attribute name="daoFramework"/>
        <attribute name="hibernate3Config" default="annotationconfiguration"/>
        
        <sequential>
            <!-- Change dao.framework property -->
            <replace file="${test.dir}/@{name}/pom.xml">
                <replacetoken><![CDATA[<dao.framework>hibernate</dao.framework>]]></replacetoken>
                <replacevalue><![CDATA[<dao.framework>@{daoFramework}</dao.framework>]]></replacevalue>
            </replace>

            <!-- Change hibernate3 plugin to use jpaconfiguration configuration -->
            <replace file="${test.dir}/@{name}/pom.xml" token="annotationconfiguration" value="@{hibernate3Config}"/>

            <!-- Remove hibernate.cfg.xml if jpaconfiguration -->
            <if>
                <equals arg1="@{hibernate3Config}" arg2="jpaconfiguration"/>
                <then>
                    <delete file="${test.dir}/@{name}/src/main/resources/hibernate.cfg.xml"/>
                </then>
            </if>
        </sequential>
    </macrodef>

    <target name="test-gen-model" description="Tests generating POJO (and UI) from a database table">
        <property name="name" value="basic-tapestry-model"/>
        <delete dir="${test.dir}/${name}"/>
        <mkdir dir="${test.dir}"/>

        <maven dir="${test.dir}" archetype="appfuse-basic-tapestry-archetype" version="${version}" name="${name}"/>
        <!-- Create database table -->
        <sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost/basic_tapestry_model?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=utf-8"
            userid="root" password="">
            <classpath>
                <fileset dir="${user.home}/.m2/repository/mysql/mysql-connector-java/5.1.14" includes="*.jar"/>
            </classpath>
            <![CDATA[
                DROP TABLE IF EXISTS cat;
                CREATE TABLE cat (
                  cat_id int(8) auto_increment,
                  color varchar(50) NOT NULL,
                  name varchar(50) NOT NULL,
                  PRIMARY KEY (cat_id)
                );
            ]]>
        </sql>
        <maven dir="${test.dir}/${name}" command="appfuse:gen-model"/>
        <maven dir="${test.dir}/${name}" command="appfuse:gen -Dentity=Cat"/>
        <maven dir="${test.dir}/${name}" command="verify -Duser.language=en -Dsurefire.useFile=false"/>
    </target>
</project>
